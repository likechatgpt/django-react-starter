version: '3.8'

services:
  nginx:
    image: nginx:1.27-alpine
    container_name: django_react_starter_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./backend/staticfiles:/home/app/backend/staticfiles:ro
      - ./backend/mediafiles:/home/app/backend/mediafiles:ro
      - ./frontend/dist:/home/app/backend/frontend/dist:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
    networks:
      - django_react_starter_network

  api:
    image: django_react_starter_api:prod
    container_name: django_react_starter_api
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/Dockerfile.prod.china
      args:
        VITE_ENVIRONMENT: production
        VITE_APP_VERSION: v1.0.0
    env_file:
      - ./backend/.env.prod
    depends_on:
      - postgres
      - rabbitmq
      - meilisearch
      - redis
    networks:
      - django_react_starter_network
    expose:
      - "8000"
    volumes:
      - ./backend/staticfiles:/home/app/backend/staticfiles
      - ./backend/mediafiles:/home/app/backend/mediafiles
    command: supervisord -c ./backend/supervisord.conf

  celery_worker:
    image: django_react_starter_api:prod
    container_name: django_react_starter_celery_worker
    restart: unless-stopped
    env_file:
      - ./backend/.env.prod
    depends_on:
      - postgres
      - rabbitmq
      - redis
    networks:
      - django_react_starter_network
    volumes:
      - ./backend/staticfiles:/home/app/backend/staticfiles
      - ./backend/mediafiles:/home/app/backend/mediafiles
    command: bash -c "cd backend && celery -A django_react_starter worker -l info"

  postgres:
    container_name: django_react_starter_postgres
    image: postgis/postgis:16-3.4-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change_me_in_production}
      - POSTGRES_DB=${POSTGRES_DB:-django_react_starter}
    networks:
      - django_react_starter_network
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: django_react_starter_rabbitmq
    image: rabbitmq:4.0.8-management
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME:-django_react_starter}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-change_me_in_production}
    networks:
      - django_react_starter_network
    ports:
      - "127.0.0.1:15672:15672"
      - "127.0.0.1:5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  meilisearch:
    container_name: django_react_starter_meilisearch
    image: getmeili/meilisearch:v1.13.3
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-change_me_in_production}
      - MEILI_ENV=production
    networks:
      - django_react_starter_network
    ports:
      - "127.0.0.1:7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: django_react_starter_redis
    image: redis:7.4-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_me_in_production}
    networks:
      - django_react_starter_network
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  rabbitmq_data:
  meilisearch_data:
  redis_data:

networks:
  django_react_starter_network:
    driver: bridge